plugins {
    id 'java'
}

ext {
    projectGroup = 'me.suhyuk.yarn'
    projectName = 'hadoop-yarn-applications'
    projectVersion = 'v1'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    hadoopVersion = '3.1.2'
}

project.group = projectGroup
project.version = projectVersion

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'

    dependencies {
//        testImplementation 'junit:junit:4.13.1'
//        implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.10'
    }
}

project(':hadoop-yarn-appmasters') {

    dependencies {
        implementation(group: 'org.apache.hadoop', name: 'hadoop-client', version: hadoopVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        implementation(group: 'org.apache.hadoop', name: 'hadoop-yarn-common', version: hadoopVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        implementation(group: 'org.apache.hadoop', name: 'hadoop-yarn-client', version: hadoopVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        manifest {
            attributes "Main-Class": "me.suhyuk.yarn.netcat.v1.NetCatClient"
        }
        from {
            configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    task("debugJarName") {
        doLast {
            println jar.getArchiveFileName()
        }
    }

}


project(':hadoop-yarn-applications') {

    dependencies {
//        implementation project(":hadoop-yarn-appmasters")
        implementation(group: 'org.apache.hadoop', name: 'hadoop-client', version: hadoopVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        implementation(group: 'org.apache.hadoop', name: 'hadoop-yarn-common', version: hadoopVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        implementation(group: 'org.apache.hadoop', name: 'hadoop-yarn-client', version: hadoopVersion) {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
        implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        manifest {
//            attributes "Main-Class": "me.suhyuk.yarn.helloworld.v1.HelloWorld"
            attributes "Main-Class": "me.suhyuk.yarn.netcat.v1.NetCatClient"
        }
        from {
            configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    task("debugJarName") {
        doLast {
            println jar.getArchiveFileName()
        }
    }

}

/**
task("listCompileClasspath") {
    doLast {
        configurations.compileClasspath.each { File file -> println(file.name) }
    }
}

task("listDepJars") {
    doLast {
        configurations.implementation.setCanBeResolved(true)
        configurations.implementation.each { File file -> println(file.name) }
    }
}

task copyDepJars(type: Copy, dependsOn: ["listDepJars"]) {
    doLast {
        println "copy into $buildDir/dependencies/libs"
    }
    configurations.implementation.setCanBeResolved(true)
    from configurations.implementation
    into "$buildDir/dependencies/libs"
}

task copyCompileClasspath(type: Copy) {
    doFirst {
        configurations.compileClasspath.each { File file -> println file.name }
    }
    from configurations.compileClasspath
    into "$buildDir/dependencies/compile"
}


task copyRuntimeClasspath(type: Copy) {
    doFirst {
        configurations.runtimeClasspath.each { File file -> println file.name }
    }
    from configurations.runtimeClasspath
    into "$buildDir/dependencies/runtime"
}

task dist(type: Copy, dependsOn: [ "build", "listCompileClasspath" ]) {
    from configurations.runtimeClasspath
    into "$buildDir/libs"
}
*/


/**
task("listRuntimeClasspath") {
    doLast {
        configurations.runtimeClasspath.each { File file -> println(file.name) }
    }
}

task uberJar(type: Jar, dependsOn: ["listRuntimeClasspath"]) {

    archiveClassifier = 'uber'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    manifest {
        attributes "Main-Class": "me.suhyuk.yarn.helloworld.v1.HelloWorld"
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }

    }
}
*/